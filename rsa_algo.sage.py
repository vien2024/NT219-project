

# This file was *autogenerated* from the file rsa_algo.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_50 = Integer(50); _sage_const_1 = Integer(1); _sage_const_48 = Integer(48); _sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_511 = Integer(511); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100)
from sage.all import *

# # Generate p and q
# p = random_prime(_sage_const_10 **_sage_const_50 -_sage_const_1 ,False,_sage_const_10 **_sage_const_48 )
# q = random_prime(_sage_const_10 **_sage_const_50 -_sage_const_1 ,False,_sage_const_10 **_sage_const_48 )

# # Ensure that p is not equal to q
# while(p==q):
#     q = random_prime(_sage_const_2 **_sage_const_512 -_sage_const_1 ,False,_sage_const_2 **_sage_const_511 )
p = 61
q = 53

# Check primality
print('----------------------------------------------------------------------------------------------------------------------')
print(f'The generated Prime number p = {p} is a true prime ? Solution = {is_prime(p)}')
print(f'The generated Prime number q = {q} is a true prime ? Solution = {is_prime(q)}')

# Calculate n and phi of n
n = p * q
phi = (p-_sage_const_1 ) * (q-_sage_const_1 )

print(f' n = {n} ')
print(f'The totient of n = {phi}')

# Find e such that e is coprime to n
e = ZZ.random_element(phi)
while gcd(e, phi) != _sage_const_1 :
    e = ZZ.random_element(phi)

print(f"e = {e}")

# Find d
bezout = xgcd(e, phi)
d = Integer(mod(bezout[_sage_const_1 ], phi))

# Accept message

m = input("Enter your message: ")

alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ,.?!:;-\'\"'
def string2number(string):
    M=_sage_const_0 
    for i in range(len(string)):
        M = _sage_const_100 *M + alphabet.index(string[i])
    return M
def number2string(M):
    string=''
    while M > _sage_const_0 :
        i = M % _sage_const_100 
        M = (M-i)/_sage_const_100 
        string = alphabet[i] + string
    return string

m = string2number(m)
print(m)

# Encrypted
c = power_mod(m, e, n)
print(f"Cipher text: {c}")

# Decrypted
decypher = power_mod(c, d, n)
decypher = number2string(decypher)
print(f"Decrypted message: {decypher}")

